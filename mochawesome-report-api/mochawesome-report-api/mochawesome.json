{
  "stats": {
    "suites": 8,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-08T17:16:13.853Z",
    "end": "2023-06-08T17:16:15.942Z",
    "duration": 2089,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dcb52e91-021c-4d22-aab8-ad6b31962c88",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
          "title": "Albums",
          "fullFile": "/Users/shiwanideshmukh/API-Automation/test/albumsTest.js",
          "file": "/test/albumsTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Albums\"",
              "fullTitle": "Albums \"before all\" hook in \"Albums\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Starting albums test suite...');",
              "err": {},
              "uuid": "405373df-a1cd-4dba-97a3-a45a6db60b19",
              "parentUUID": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Albums\"",
              "fullTitle": "Albums \"after all\" hook in \"Albums\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Albums test suite finished.');",
              "err": {},
              "uuid": "c25d1932-b83b-4f53-a8d4-961c5565b682",
              "parentUUID": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "POST",
              "fullTitle": "Albums POST",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const albumData = {\n  userId: 1,\n  title: 'New Album',\n};\napiHelper\n  .post('albums', albumData)\n  .end((err, res) => {\n    // Assertion\n    expect(res.status).to.equal(201);\n    expect(res.body).to.deep.include(albumData);\n    console.log('Created Album:', res.body);\n    done();\n  });",
              "err": {},
              "uuid": "b9d76d82-a503-468b-807f-18a7440911e7",
              "parentUUID": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /albums with query params",
              "fullTitle": "Albums GET /albums with query params",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = 'albums?userId=1&id=5';\nconst res = await apiHelper.get(url);\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body) {\n  res.body.forEach((element) => {\n    expect(element.userId).to.equal(1);\n    expect(element.id).to.equal(5);\n  });\n}\nconsole.log(res.body);",
              "err": {},
              "uuid": "d61e34ce-0032-4d49-b802-92b355fb6461",
              "parentUUID": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set headers for a request",
              "fullTitle": "Albums should set headers for a request",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await apiHelper.get('albums');\n// Assertion\nexpect(res.status).to.equal(200);\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "a65b53c6-e3d7-4091-a001-a753615ffd00",
              "parentUUID": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the body for a request",
              "fullTitle": "Albums should set the body for a request",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const albumData = {\n  title: 'New Album',\n};\nconst res = await apiHelper.post('albums', albumData);\n// Assertion\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(albumData.title);\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "fb93b57f-07a1-4e93-be28-a1d22d66feed",
              "parentUUID": "bd1d0990-03b2-4d77-b17f-6679b6a81ea1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9d76d82-a503-468b-807f-18a7440911e7",
            "d61e34ce-0032-4d49-b802-92b355fb6461",
            "a65b53c6-e3d7-4091-a001-a753615ffd00",
            "fb93b57f-07a1-4e93-be28-a1d22d66feed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 493,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
          "title": "Comments",
          "fullFile": "/Users/shiwanideshmukh/API-Automation/test/commentsTest.js",
          "file": "/test/commentsTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Comments\"",
              "fullTitle": "Comments \"before all\" hook in \"Comments\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Starting comments test suite...');\ndone();",
              "err": {},
              "uuid": "60f19724-aa00-4907-83c1-fcc2617b92a7",
              "parentUUID": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Comments\"",
              "fullTitle": "Comments \"after all\" hook in \"Comments\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Finished comments test suite');\ndone();",
              "err": {},
              "uuid": "5f5d5cc3-da66-4634-80f4-01f2c198c0cd",
              "parentUUID": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /comments",
              "fullTitle": "Comments GET /comments",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await apiHelper.get('comments');\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.not.be.empty;\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "5148006b-d310-4579-95a0-63413b7c7333",
              "parentUUID": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /comments",
              "fullTitle": "Comments POST /comments",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n  postId: '1',\n  name: 'that labor from and how many labors',\n  email: 'test@example.com',\n  body: 'for those who praise lord',\n};\nconst res = await apiHelper.post('comments', data);\n// Assertion\nexpect(res.status).to.equal(201);\nexpect(res.body.email).to.equal(data.email);\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "66d23629-cc3e-453c-8b9a-cd37bba2cf4d",
              "parentUUID": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert the response from a request",
              "fullTitle": "Comments should assert the response from a request",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await apiHelper.get('comments/1');\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('postId');\nexpect(res.body).to.have.property('name');\nexpect(res.body).to.have.property('email');\nexpect(res.body).to.have.property('body');\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "af66f7b4-89e6-4d27-9c3c-b6037c582751",
              "parentUUID": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use the response from one call in the request for another",
              "fullTitle": "Comments should use the response from one call in the request for another",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postRes = await apiHelper.get('posts/1');\nconst postId = postRes.body.id;\nconst commentsRes = await apiHelper.get(`posts/${postId}/comments`);\n// Assertion\nexpect(commentsRes.status).to.equal(200);\nconsole.log('Response:', commentsRes.body);",
              "err": {},
              "uuid": "ccb14b44-8e5e-4cfd-b70a-2098a938ca97",
              "parentUUID": "7cd6181a-9fa7-4ba5-87a8-e2d20185aca9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5148006b-d310-4579-95a0-63413b7c7333",
            "66d23629-cc3e-453c-8b9a-cd37bba2cf4d",
            "af66f7b4-89e6-4d27-9c3c-b6037c582751",
            "ccb14b44-8e5e-4cfd-b70a-2098a938ca97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 579,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0f8435a8-90df-4d52-af91-05eff2fbc1fa",
          "title": "Posts",
          "fullFile": "/Users/shiwanideshmukh/API-Automation/test/postsTest.js",
          "file": "/test/postsTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Posts\"",
              "fullTitle": "Posts \"before all\" hook in \"Posts\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Starting Posts test suite');",
              "err": {},
              "uuid": "76fffb44-0e7e-4198-b626-3bbb024e9ddd",
              "parentUUID": "0f8435a8-90df-4d52-af91-05eff2fbc1fa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Posts\"",
              "fullTitle": "Posts \"after all\" hook in \"Posts\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Finishing Posts test suite');",
              "err": {},
              "uuid": "4a28dadf-a311-42bf-be45-d7d28d2f4a88",
              "parentUUID": "0f8435a8-90df-4d52-af91-05eff2fbc1fa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1a34cf6d-1589-4191-94d6-e6f90eeba602",
              "title": "POST",
              "fullFile": "/Users/shiwanideshmukh/API-Automation/test/postsTest.js",
              "file": "/test/postsTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a post",
                  "fullTitle": "Posts POST should create a post",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n  userId: 1,\n  title: 'New Post',\n  body: 'Lorem ipsum dolor sit amet.',\n};\nconst res = await apiHelper.post('posts', data);\n// Assertion\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(data.title);\npostId = res.body.id;\nconsole.log('Post created:', res.body);",
                  "err": {},
                  "uuid": "2446659f-690c-4443-84d4-bcc3da012aa7",
                  "parentUUID": "1a34cf6d-1589-4191-94d6-e6f90eeba602",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2446659f-690c-4443-84d4-bcc3da012aa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 120,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4eed59b6-3834-414d-a84b-73b1f8c8d060",
              "title": "GET",
              "fullFile": "/Users/shiwanideshmukh/API-Automation/test/postsTest.js",
              "file": "/test/postsTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get a post by id",
                  "fullTitle": "Posts GET should get a post by id",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Skip the test if postId is not set\nif (!postId) {\n  this.skip();\n}\nconst res = await apiHelper.get(`posts/${postId}`);\nconsole.log('Response:', res.body);",
                  "err": {},
                  "uuid": "92ccfc18-67a2-40da-8065-eec4f35a59af",
                  "parentUUID": "4eed59b6-3834-414d-a84b-73b1f8c8d060",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use the response from one call in the request for another",
                  "fullTitle": "Posts GET should use the response from one call in the request for another",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Skip the test if postId is not set\nif (!postId) {\n  this.skip();\n}\nconst res = await apiHelper.get(`posts/${postId}/comments`);\n// Assertion\nexpect(res.status).to.equal(200);\nconsole.log('Response:', res.body);",
                  "err": {},
                  "uuid": "6b1fba7b-c25c-47a3-93a6-420d4eb19e6e",
                  "parentUUID": "4eed59b6-3834-414d-a84b-73b1f8c8d060",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92ccfc18-67a2-40da-8065-eec4f35a59af",
                "6b1fba7b-c25c-47a3-93a6-420d4eb19e6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 180,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d71cf2f5-5b6d-4243-839b-c0e83d7c88ee",
              "title": "PUT",
              "fullFile": "/Users/shiwanideshmukh/API-Automation/test/postsTest.js",
              "file": "/test/postsTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a post",
                  "fullTitle": "Posts PUT should update a post",
                  "timedOut": false,
                  "duration": 275,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Skip the test if postId is not set\nif (!postId) {\n  this.skip();\n}\nconst data = {\n  title: 'Updated Title',\n  body: 'Updated body',\n};\nconst res = await apiHelper.put(`posts/${postId}`, data);\nconsole.log('Response:', res.body);",
                  "err": {},
                  "uuid": "fc846893-2cd1-4286-8757-3356e49a111c",
                  "parentUUID": "d71cf2f5-5b6d-4243-839b-c0e83d7c88ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc846893-2cd1-4286-8757-3356e49a111c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 275,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b7cfb238-aef5-4fcf-a286-7407b09adad2",
              "title": "DELETE",
              "fullFile": "/Users/shiwanideshmukh/API-Automation/test/postsTest.js",
              "file": "/test/postsTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a post",
                  "fullTitle": "Posts DELETE should delete a post",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Skip the test if postId is not set\nif (!postId) {\n  this.skip();\n}\nconst res = await apiHelper.delete(`posts/${postId}`);\n// Assertion\nexpect(res.status).to.equal(200);\nconsole.log('Post deleted');",
                  "err": {},
                  "uuid": "69d0344a-6800-42b6-8881-97282e4ef96e",
                  "parentUUID": "b7cfb238-aef5-4fcf-a286-7407b09adad2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69d0344a-6800-42b6-8881-97282e4ef96e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "87d94f1e-2756-4d33-9c95-6b2ddc9afcd1",
          "title": "Users",
          "fullFile": "/Users/shiwanideshmukh/API-Automation/test/usersTest.js",
          "file": "/test/usersTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users\"",
              "fullTitle": "Users \"before all\" hook in \"Users\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Starting Users API tests...');",
              "err": {},
              "uuid": "f55c016d-b8df-4725-8ef0-6545d515e9ed",
              "parentUUID": "87d94f1e-2756-4d33-9c95-6b2ddc9afcd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Users\"",
              "fullTitle": "Users \"after all\" hook in \"Users\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('All Users API tests completed.');",
              "err": {},
              "uuid": "0f513bf9-eb90-4023-b43f-f8238b80eeaf",
              "parentUUID": "87d94f1e-2756-4d33-9c95-6b2ddc9afcd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /users",
              "fullTitle": "Users GET /users",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await apiHelper.get('users');\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.not.be.empty;\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "ebdf7283-0222-4cb9-9456-f952961b5923",
              "parentUUID": "87d94f1e-2756-4d33-9c95-6b2ddc9afcd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users/:id",
              "fullTitle": "Users GET /users/:id",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await apiHelper.get('users/1');\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('id');\nexpect(res.body).to.have.property('name');\nexpect(res.body).to.have.property('email');\nexpect(res.body).to.have.property('address');\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "40358978-a2d3-4e8c-9346-49515167a2f4",
              "parentUUID": "87d94f1e-2756-4d33-9c95-6b2ddc9afcd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert the response from a request",
              "fullTitle": "Users should assert the response from a request",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queryParams = {\n  username: 'Bret',\n  email: 'test@example.com',\n};\nconst res = await apiHelper.get('users', queryParams);\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body).to.have.length.above(0);\nconsole.log('Response:', res.body);",
              "err": {},
              "uuid": "9f4da89b-846b-4ffc-96c1-ad5db9ca7420",
              "parentUUID": "87d94f1e-2756-4d33-9c95-6b2ddc9afcd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebdf7283-0222-4cb9-9456-f952961b5923",
            "40358978-a2d3-4e8c-9346-49515167a2f4",
            "9f4da89b-846b-4ffc-96c1-ad5db9ca7420"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}